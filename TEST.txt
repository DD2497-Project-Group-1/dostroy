Four different scenarios can be tested with our DoS mitigation tool dostroy:
1. Rate limiting
2. Slowloris prevention
3. RUDY prevention
4. Generic error handling

Requirements:
- Node.js installed (≥ v8.15.0).
- npm installed (≥ v6.10.2).
- Preferrably two machine to run the tests on as behaviour can't be guaranteed when the attacker and target is the same computer.

Initial setup:
1. Clone the following repository on computer 1:
  1.1 Example server: https://github.com/DD2497-Project-Group-1/example-server
2. Clone the following repositories on computer 2:
  2.1 Flooding tool: https://github.com/DD2497-Project-Group-1/flood-dos
  2.2 Slowloris tool: https://github.com/DD2497-Project-Group-1/slowloris
  2.3 RUDY tool: https://github.com/DD2497-Project-Group-1/rudy
3. Follow the instructions in the READMES of repo 1.1, 2.2 and 2.3 to install required dependencies.

Testing Rate limiting:
1. Start the example server on computer 1 by running the following command while standing in the server directory: node server.js.
2. The server will start on port 3000, so visit 127.0.0.1:3000 to see that it's up and running.
3. On computer 2 visit [IP of computer 1]:3000 and refresh about 10 times to see that you're blocked by the rate limiter.
4. Wait a few seconds to see that you're now able to enter the page again.
5. On computer 2, go to the flood-dos repository and run it with the following command: ./bashFlood [IP of computer 1] 3000 500 in order to send 500 requests to the example server. As you can see in your terminal, the requests will be blocked.

Testing Slowloris:
1. On computer 1, deactivate slowloris prevention by changing the config in example-server/server/server.js to say slowloris: false.
2. Start the server.
3. On computer 2, go to the slowloris repository. In the file index.js (line 6), change the variable host to the IP address of computer 1.
4. Start the application by running node index.js. You will be asked for the port (it's 3000) and the number of connections you want to start (about 150 should work).
5. Try to visit the server in your browser. It should now be under attack and not be able to visit.
6. On computer 1, activate slowloris prevention by chaning the config object to slowloris: true. Start the server again.
7. On computer 2, run the slorlowis tool again.
8. Visit the server to see that the slowloris attack is now prevented and you're able to visit the page.

Testing RUDY:
1. On computer 1, deactivate RUDY prevention by changing the config in example-server/server/server.js to say rudy: false.
2. Start the server.
3. On computer 2, go to the rudy repository. In the file index.js (line 8), change the variable host to the IP address of computer 1 including port 3000.
4. Start the application by running node index.js.
5. Try to visit the server in your browser. It should now be under attack and not be able to visit.
6. On computer 1, activate RUDY prevention by changing the config object to rudy: true. Start the server again.
7. On computer 2, run the rudy tool again.
8. Visit the server to see that the slowloris attack is now prevented and you're able to visit the page.

Testing Generic error handling:
1. On computer 1, deactive error handling by removing line 48 in example-server/server/server.js.
2. Start the server.
3. On computer 2, visit [IP of computer 1]:3000/error?param=-1. You should now see an error containing information about computer 1.
4. On computer 1, activate error handling by adding line 48 again and restart the server.
5. Visit [IP of computer 1]:3000/error?param=-1 again. The error should now be generic.